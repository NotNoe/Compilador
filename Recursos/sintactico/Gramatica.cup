package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import ast.designadores.*;
import ast.expresiones.*;
import ast.externos.*;
import ast.externos.util.*;
import ast.instrucciones.*;
import ast.tipo.*;

scan with {: return getScanner().next_token(); :};
//action code {:
//   ... add some code to declare and initialize e.g. variables used by the code embedded in the grammar
//:};
parser code {: 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal INT, CHAR, BOOL, CLASS, STRUCT, FOR, WHILE, IF,
SWITCH, BREAK, CONTINUE, CONST, VOID, DEFAULT, CASE, NEW, RETURN,
TRUE, FALSE, THIS, DELETE, SUMA, AST, RESTA, DIV,
AND, OR, PAP, PCIERRE, CAP, CCIERRE, LAP, LCIERRE, MAYORIG,
MAYOR, MENORIG, MENOR, IGUAL, DESIG, NEG, ASIG, REF, MOD,
PUNTO, PUNTOCOMA, COMA, TYPEDEF, ELSE, POINTER, NULL; 

terminal TokenValue IDEN, ENT, CARACTER;


non terminal Programa P;
non terminal Designador DESIGNADOR, I1, I2, I3;
non terminal Tipo TIPO, T1;
non terminal Declaracion DECLARACION;
non terminal ArrayDimensiones GENCORCHETES;
non terminal Asignacion ASIGNACION;
non terminal Externo ESTRUCTURADO, CLASE, DEFTIPO;
non terminal BloqueInstrucciones BLOQUE_INSTRUCCIONES;
non terminal Declaraciones BLOQUE_DECLARACIONES;
non terminal DefFuncion FUNCION;
non terminal Parametros PARAMETROS, AUX1;
non terminal DefProcedimiento PROCEDIMIENTO;
non terminal CuerpoClase CUERPO_CLASE;
non terminal Instruccion CONDICIONAL, MIENTRAS, PARA, SELECTOR, BORRADO, DEVOLVER, INSTRUCCION;
non terminal Cuerpo_Switch CUERPO_CASE;
non terminal SwitchCase CASE_INDIVIDUAL;
non terminal E EXPRESION, E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, LISTA;
non terminal Llamada LLAMADA;
non terminal SeqExp SEQ_EXPRE, SEQ_EXPRE_NOVACIA;

P ::= DECLARACION:d P:p {: RESULT = new Programa(d, p); :} 
| FUNCION:d P:p {: RESULT = new Programa(d, p); :}
| PROCEDIMIENTO:d P:p {: RESULT = new Programa(d, p); :}
| CLASE:d P:p {: RESULT = new Programa(d, p); :} 
| ESTRUCTURADO:d P:p {: RESULT = new Programa(d, p); :} 
| DEFTIPO:d P:p {: RESULT = new Programa(d, p); :}
| {: RESULT = new Programa(); :} 
| error LCIERRE P 
| error PUNTOCOMA P ;


DESIGNADOR ::= DESIGNADOR:d CAP EXPRESION:e CCIERRE {: RESULT = new Corchetes(d, e); :} | I1:a {: RESULT = a; :} ;
I1 ::= I1:d PUNTO IDEN:id {: RESULT = new Punto(d, new Identificador(id.lexema)); :}| I1:d PUNTO LLAMADA:l {: RESULT = new Punto(d, l); :} | I2:a {: RESULT = a; :};
I2 ::= AST I2:d {: RESULT = new Asterisco(d); :}| I3:a {: RESULT = a; :} ;
I3 ::= IDEN:id {: RESULT = new Identificador(id.lexema); :} | THIS {:RESULT = new This(); :} ;


TIPO ::= POINTER TIPO:t {: RESULT = new Pointer(t); :} 
| T1:a {: RESULT = a; :}
| error INT
| error BOOL
| error CHAR;
T1 ::= INT {: RESULT = new Int(); :} 
| CHAR {: RESULT = new Char(); :} 
| BOOL {: RESULT = new Bool(); :} 
| IDEN:id {: RESULT = new Identificador(id.lexema); :};


DECLARACION ::= TIPO:t IDEN:i GENCORCHETES:c ASIG EXPRESION:e PUNTOCOMA {: RESULT = new Declaracion(false, t, new Identificador(i.lexema), c, e); :}
| TIPO:t IDEN:i GENCORCHETES:c PUNTOCOMA {: RESULT = new Declaracion(t, new Identificador(i.lexema), c); :}
| CONST TIPO:t IDEN:i GENCORCHETES:c ASIG EXPRESION:e PUNTOCOMA {: RESULT = new Declaracion(true, t, new Identificador(i.lexema), c, e); :}
| error ASIG EXPRESION PUNTOCOMA
| CONST error ASIG EXPRESION PUNTOCOMA
| TIPO IDEN GENCORCHETES ASIG error PUNTOCOMA
| error ASIG error PUNTOCOMA
| CONST error ASIG error PUNTOCOMA
| CONST TIPO IDEN GENCORCHETES ASIG error PUNTOCOMA;

GENCORCHETES ::= CAP EXPRESION:e CCIERRE GENCORCHETES:g {: RESULT = new ArrayDimensiones(e, g); :}|
{: RESULT = new ArrayDimensiones(); :} ;

ASIGNACION ::= DESIGNADOR:d ASIG EXPRESION:e PUNTOCOMA {: RESULT = new Asignacion(d, e); :} 
| DESIGNADOR ASIG error PUNTOCOMA;

ESTRUCTURADO ::= STRUCT LAP BLOQUE_DECLARACIONES:d LCIERRE IDEN:i PUNTOCOMA {: RESULT = new DefStruct(d,new Identificador(i.lexema)); :}
| STRUCT LAP BLOQUE_DECLARACIONES LCIERRE error PUNTOCOMA;

BLOQUE_INSTRUCCIONES ::= INSTRUCCION:i BLOQUE_INSTRUCCIONES:b {: RESULT = new BloqueInstrucciones(i, b); :}
| {: RESULT = new BloqueInstrucciones(); :} 
| error PUNTOCOMA BLOQUE_INSTRUCCIONES;

BLOQUE_DECLARACIONES ::= DECLARACION:d BLOQUE_DECLARACIONES:b {: RESULT = new Declaraciones(d, b); :}
| {: RESULT = new Declaraciones(); :} 
| error PUNTOCOMA BLOQUE_DECLARACIONES;

FUNCION ::= TIPO:t IDEN:i PAP PARAMETROS:p PCIERRE LAP BLOQUE_INSTRUCCIONES:b LCIERRE {: RESULT = new DefFuncion(t, new Identificador(i.lexema), p, b); :}
| TIPO IDEN PAP error LAP BLOQUE_INSTRUCCIONES LCIERRE
| error PAP PARAMETROS PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE;

AUX1 ::= TIPO:t IDEN:i GENCORCHETES:c COMA AUX1:p {: RESULT = new Parametros(new Parametro(t, false, new Identificador(i.lexema), c), p); :}
| TIPO:t IDEN:i GENCORCHETES:c {: RESULT = new Parametros(new Parametro(t, false, new Identificador(i.lexema), c), new Parametros()); :}
| TIPO:t REF IDEN:i GENCORCHETES:c {: RESULT = new Parametros(new Parametro(t, true, new Identificador(i.lexema), c), new Parametros()); :}
| TIPO:t REF IDEN:i GENCORCHETES:c COMA AUX1:p {: RESULT = new Parametros(new Parametro(t, true, new Identificador(i.lexema), c), p); :}
| error COMA AUX1;
PARAMETROS ::= AUX1:a {: RESULT = a; :} | {:RESULT = new Parametros(); :} ;

PROCEDIMIENTO ::= VOID IDEN:i PAP PARAMETROS:p PCIERRE LAP BLOQUE_INSTRUCCIONES:b LCIERRE {: RESULT = new DefProcedimiento(new Identificador(i.lexema), p, b); :} 
| VOID IDEN PAP error LAP BLOQUE_INSTRUCCIONES LCIERRE;

CUERPO_CLASE ::= DECLARACION:d CUERPO_CLASE:c {: RESULT = new CuerpoClase(d, c); :}
| FUNCION:d CUERPO_CLASE:c {: RESULT = new CuerpoClase(d, c); :}
| PROCEDIMIENTO:d CUERPO_CLASE:c {: RESULT = new CuerpoClase(d, c); :}
| {: RESULT = new CuerpoClase(); :} 
| error PUNTOCOMA CUERPO_CLASE;

CLASE ::= CLASS LAP CUERPO_CLASE:c LCIERRE IDEN:i PUNTOCOMA {: RESULT = new DefClase(c, new Identificador(i.lexema)); :} ;

DEFTIPO ::= TYPEDEF TIPO:t IDEN:i GENCORCHETES:g PUNTOCOMA{: RESULT = new DefTipo(t, new Identificador(i.lexema), g); :}
| TYPEDEF error PUNTOCOMA;


INSTRUCCION ::= DECLARACION:d {:RESULT = d; :} 
| ASIGNACION:d {:RESULT = d; :} 
| MIENTRAS:d {:RESULT = d; :} 
| PARA:d {:RESULT = d; :} 
| SELECTOR:d {:RESULT = d; :} 
| DEVOLVER:d {:RESULT = d; :} 
| BREAK PUNTOCOMA {:RESULT = new Break(); :}
| CONTINUE PUNTOCOMA {:RESULT = new Continue(); :}
| BORRADO:d {:RESULT = d; :} 
| EXPRESION:d PUNTOCOMA {:RESULT = d; :} 
| CONDICIONAL:d {:RESULT = d; :} ;


CONDICIONAL ::= IF PAP EXPRESION:e PCIERRE LAP BLOQUE_INSTRUCCIONES:b LCIERRE {: RESULT = new If(e, b); :} 
| IF PAP EXPRESION:e PCIERRE LAP BLOQUE_INSTRUCCIONES:b1 LCIERRE ELSE LAP BLOQUE_INSTRUCCIONES:b2 LCIERRE {: RESULT = new If(e, b1, b2); :} 
| IF error PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE
| IF error PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE ELSE LAP BLOQUE_INSTRUCCIONES LCIERRE
| IF error LAP BLOQUE_INSTRUCCIONES LCIERRE
| IF error LAP BLOQUE_INSTRUCCIONES LCIERRE ELSE LAP BLOQUE_INSTRUCCIONES LCIERRE;

MIENTRAS ::= WHILE PAP EXPRESION:e PCIERRE LAP BLOQUE_INSTRUCCIONES:b LCIERRE {: RESULT = new While(e, b); :}
| WHILE error PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE
| WHILE error LAP BLOQUE_INSTRUCCIONES LCIERRE;

PARA ::= FOR PAP DECLARACION:d EXPRESION:e PUNTOCOMA INSTRUCCION:i PCIERRE LAP BLOQUE_INSTRUCCIONES:b LCIERRE {: RESULT = new For(d, e, i, b); :} 
| FOR error PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE
| FOR error LAP BLOQUE_INSTRUCCIONES LCIERRE;

DEVOLVER ::= RETURN EXPRESION:e PUNTOCOMA {: RESULT = new Return(e); :} 
| RETURN error PUNTOCOMA;

BORRADO ::= DELETE DESIGNADOR:d PUNTOCOMA {: RESULT = new Delete(d); :} 
| DELETE error PUNTOCOMA;

SELECTOR ::= SWITCH PAP EXPRESION:e PCIERRE LAP CUERPO_CASE:c LCIERRE {: RESULT = new Switch(e, c); :} 
| SWITCH error PCIERRE LAP CUERPO_CASE LCIERRE
| SWITCH error LAP CUERPO_CASE LCIERRE;

CUERPO_CASE ::= CASE_INDIVIDUAL:i CUERPO_CASE:c {: RESULT = new Cuerpo_Switch(i, c); :} 
| {: RESULT = new Cuerpo_Switch(); :};
CASE_INDIVIDUAL ::= CASE EXPRESION:e LAP BLOQUE_INSTRUCCIONES:b LCIERRE {: RESULT = new Case(e, b); :}
| DEFAULT LAP BLOQUE_INSTRUCCIONES:b LCIERRE {:RESULT = new Default(b); :} 
| CASE error LAP BLOQUE_INSTRUCCIONES LCIERRE;




EXPRESION ::= EXPRESION:e1 OR E0:e2 {: RESULT = new EBin(e1, e2, "||"); :}
| E0:e {: RESULT = e; :} ;
E0 ::= E0:e1 AND E1:e2 {: RESULT = new EBin(e1, e2, "&&"); :} 
| E1:e {: RESULT = e; :} ;
E1 ::= E1:e1 IGUAL E2:e2 {: RESULT = new EBin(e1, e2, "=="); :} 
| E2:e {: RESULT = e; :} ;
E2 ::= E2:e1 DESIG E3:e2 {: RESULT = new EBin(e1, e2, "!="); :}
| E3:e {: RESULT = e; :} ;
E3 ::= E3:e1 MENORIG E4:e2 {: RESULT = new EBin(e1, e2, "<="); :}
| E4:e {: RESULT = e; :} ;
E4 ::= E4:e1 MENOR E5:e2 {: RESULT = new EBin(e1, e2, "<"); :}
| E5:e {: RESULT = e; :} ;
E5 ::= E5:e1 MAYORIG E6:e2 {: RESULT = new EBin(e1, e2, ">="); :}
| E6:e {: RESULT = e; :} ;
E6 ::= E6:e1 MAYOR E7:e2 {: RESULT = new EBin(e1, e2, ">"); :}
| E7:e {: RESULT = e; :} ;
E7 ::= E7:e1 SUMA E8:e2 {: RESULT = new EBin(e1, e2, "+"); :}
| E8:e {: RESULT = e; :} ;
E8 ::= E8:e1 RESTA E9:e2 {: RESULT = new EBin(e1, e2, "-"); :}
| E9:e {: RESULT = e; :} ;
E9 ::= E9:e1 DIV E10:e2 {: RESULT = new EBin(e1, e2, "/"); :}
| E10:e {: RESULT = e; :} ;
E10 ::= E10:e1 MOD E11:e2 {: RESULT = new EBin(e1, e2, "%"); :}
| E11:e {: RESULT = e; :} ;
E11 ::= E11:e1 AST E12:e2 {: RESULT = new EBin(e1, e2, "*"); :}
| E12:e {: RESULT = e; :} ;
E12 ::= REF E12:e {: RESULT = new OpUn(e, "&"); :} 
| E13:e {: RESULT = e; :} ;
E13 ::= NEG E13:e {: RESULT = new OpUn(e, "!"); :}  
| E14:e {: RESULT = e; :} ;
E14 ::= RESTA E14:e {: RESULT = new OpUn(e, "-"); :} 
| E15:e {: RESULT = e; :} ;
E15 ::= TRUE {: RESULT = new True(); :}
| FALSE {: RESULT = new False(); :}
| ENT:e {: RESULT = new Num(e.lexema); :}
| CARACTER:c {: RESULT = new Caracter(c.lexema); :}
| PAP EXPRESION:e PCIERRE {: RESULT = e; :}
| LISTA:l {: RESULT = l; :}
| LLAMADA:l {: RESULT = l; :}
| DESIGNADOR:d {: RESULT = d; :}
| NEW TIPO:t GENCORCHETES:c {: RESULT = new New(t, c); :}
| NULL{: RESULT = new Null(); :} ;



LLAMADA ::= IDEN:i PAP SEQ_EXPRE:e PCIERRE {: RESULT = new Llamada(new Identificador(i.lexema), e); :} 
| IDEN PAP error PCIERRE;

SEQ_EXPRE_NOVACIA ::= EXPRESION:e {: RESULT = new SeqExp(e, new SeqExp()); :} 
| EXPRESION:e COMA SEQ_EXPRE_NOVACIA:s {: RESULT = new SeqExp(e, s); :} 
| error COMA SEQ_EXPRE;

SEQ_EXPRE ::= SEQ_EXPRE_NOVACIA:s {:RESULT = s;:} | {: RESULT = new SeqExp(); :};
LISTA ::= CAP SEQ_EXPRE:s CCIERRE {:RESULT = new Lista(s); :} ;












