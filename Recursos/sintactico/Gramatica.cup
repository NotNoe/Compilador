package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;

scan with {: return getScanner().next_token(); :};
//action code {:
//   ... add some code to declare and initialize e.g. variables used by the code embedded in the grammar
//:};
parser code {: 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal  INT, CHAR, BOOL, CLASS, STRUCT, FOR, WHILE, IF,
SWITCH, BREAK, CONTINUE, CONST, VOID, DEFAULT, CASE, NEW, RETURN,
TRUE, FALSE, THIS, DELETE, BUILD, IDEN, ENT, SUMA, AST, RESTA, DIV,
AND, OR, PAP, PCIERRE, CAP, CCIERRE, LAP, LCIERRE, MAYORIG,
MAYOR, MENORIG, MENOR, IGUAL, DESIG, NEG, ASIG, REF, MOD,
PUNTO, PUNTOCOMA, COMA;

non terminal S;

S ::= INT | CHAR | BOOL | CLASS | STRUCT | FOR | WHILE | IF |
SWITCH | BREAK | CONTINUE | CONST | VOID | DEFAULT | CASE | NEW | RETURN |
TRUE | FALSE | THIS | DELETE | BUILD | IDEN | ENT | SUMA | AST | RESTA | DIV |
AND | OR | PAP | PCIERRE | CAP | CCIERRE | LAP | LCIERRE | MAYORIG |
MAYOR | MENORIG | MENOR | IGUAL | DESIG | NEG | ASIG | REF | MOD |
PUNTO | PUNTOCOMA | COMA;


