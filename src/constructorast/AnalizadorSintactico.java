
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Mar 23 20:26:26 CET 2022
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import ast.designadores.*;
import ast.expresiones.*;
import ast.externos.*;
import ast.externos.util.*;
import ast.instrucciones.*;
import ast.tipo.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Mar 23 20:26:26 CET 2022
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\002\000\002\003\006\000" +
    "\002\003\003\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\005\004\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\004\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\010\000\002\011\006\000\002" +
    "\011\011\000\002\012\006\000\002\012\002\000\002\013" +
    "\006\000\002\014\010\000\002\017\004\000\002\017\002" +
    "\000\002\020\004\000\002\020\002\000\002\021\012\000" +
    "\002\023\006\000\002\023\004\000\002\023\005\000\002" +
    "\023\007\000\002\022\003\000\002\022\002\000\002\024" +
    "\012\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\002\000\002\015\010\000\002\016\006\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\004\000\002\034\004\000\002\034\003\000\002\034\004" +
    "\000\002\034\003\000\002\026\011\000\002\026\015\000" +
    "\002\027\011\000\002\030\014\000\002\033\005\000\002" +
    "\032\005\000\002\031\011\000\002\035\004\000\002\035" +
    "\002\000\002\036\007\000\002\036\006\000\002\037\005" +
    "\000\002\037\003\000\002\040\005\000\002\040\003\000" +
    "\002\041\005\000\002\041\003\000\002\042\005\000\002" +
    "\042\003\000\002\043\005\000\002\043\003\000\002\044" +
    "\005\000\002\044\003\000\002\045\005\000\002\045\003" +
    "\000\002\046\005\000\002\046\003\000\002\047\005\000" +
    "\002\047\003\000\002\050\005\000\002\050\003\000\002" +
    "\051\005\000\002\051\003\000\002\052\005\000\002\052" +
    "\003\000\002\053\005\000\002\053\003\000\002\054\004" +
    "\000\002\054\003\000\002\055\004\000\002\055\003\000" +
    "\002\056\004\000\002\056\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\005\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\005\000\002\057\003\000\002\061\006\000" +
    "\002\063\003\000\002\063\005\000\002\062\003\000\002" +
    "\062\002\000\002\060\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\030\002\ufffa\004\006\005\007\006\023\007" +
    "\004\010\005\017\021\020\024\062\020\064\022\070\012" +
    "\001\002\000\004\043\360\001\002\000\004\043\351\001" +
    "\002\000\054\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\040\uffee\041\uffee\042\uffee\043\uffee\045\uffee\046" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\055\uffee\056\uffee" +
    "\060\uffee\061\uffee\070\uffee\001\002\000\054\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\055\uffed\056\uffed\060\uffed\061\uffed\070\uffed" +
    "\001\002\000\030\002\ufffa\004\006\005\007\006\023\007" +
    "\004\010\005\017\021\020\024\062\020\064\022\070\012" +
    "\001\002\000\004\002\347\001\002\000\054\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\055\uffeb\056\uffeb\060\uffeb\061\uffeb\070\uffeb" +
    "\001\002\000\030\002\ufffa\004\006\005\007\006\023\007" +
    "\004\010\005\017\021\020\024\062\020\064\022\070\012" +
    "\001\002\000\030\002\ufffa\004\006\005\007\006\023\007" +
    "\004\010\005\017\021\020\024\062\020\064\022\070\012" +
    "\001\002\000\004\070\336\001\002\000\030\002\ufffa\004" +
    "\006\005\007\006\023\007\004\010\005\017\021\020\024" +
    "\062\020\064\022\070\012\001\002\000\054\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\055\uffef\056\uffef\060\uffef\061\uffef\070\uffef" +
    "\001\002\000\014\004\006\005\007\006\023\064\022\070" +
    "\012\001\002\000\014\004\006\005\007\006\023\064\022" +
    "\070\012\001\002\000\012\004\006\005\007\006\023\070" +
    "\012\001\002\000\054\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\040\uffec\041\uffec\042\uffec\043\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\055\uffec" +
    "\056\uffec\060\uffec\061\uffec\070\uffec\001\002\000\004\070" +
    "\031\001\002\000\030\002\ufffa\004\006\005\007\006\023" +
    "\007\004\010\005\017\021\020\024\062\020\064\022\070" +
    "\012\001\002\000\030\002\ufffa\004\006\005\007\006\023" +
    "\007\004\010\005\017\021\020\024\062\020\064\022\070" +
    "\012\001\002\000\004\002\uffff\001\002\000\004\002\ufffc" +
    "\001\002\000\004\037\032\001\002\000\016\004\006\005" +
    "\007\006\023\040\uffd9\064\022\070\012\001\002\000\006" +
    "\055\314\070\315\001\002\000\004\040\uffda\001\002\000" +
    "\004\040\036\001\002\000\004\043\037\001\002\000\072" +
    "\004\006\005\007\006\023\011\047\012\111\013\056\014" +
    "\101\015\074\016\045\017\021\023\072\024\067\025\071" +
    "\026\117\027\057\030\051\032\066\033\043\037\106\041" +
    "\044\044\uffe2\053\107\055\050\064\022\065\073\066\104" +
    "\067\052\070\110\001\002\000\004\070\306\001\002\000" +
    "\074\004\uffcc\005\uffcc\006\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\044\uffcc\053\uffcc\055\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\001\002\000\074\004\uffcd" +
    "\005\uffcd\006\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\032\uffcd\033\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\044\uffcd\053\uffcd\055\uffcd\064\uffcd\065\uffcd\066\uffcd" +
    "\067\uffcd\070\uffcd\001\002\000\032\023\072\025\071\026" +
    "\117\027\057\032\066\033\043\037\106\041\044\065\073" +
    "\066\104\067\052\070\131\001\002\000\040\023\072\025" +
    "\071\026\117\027\057\032\066\033\043\037\106\041\044" +
    "\042\uff8d\053\107\055\050\065\073\066\104\067\052\070" +
    "\131\001\002\000\004\060\302\001\002\000\072\004\006" +
    "\005\007\006\023\011\047\012\111\013\056\014\101\015" +
    "\074\016\045\017\021\023\072\024\067\025\071\026\117" +
    "\027\057\030\051\032\066\033\043\037\106\041\044\044" +
    "\uffe2\053\107\055\050\064\022\065\073\066\104\067\052" +
    "\070\110\001\002\000\004\037\270\001\002\000\036\023" +
    "\072\025\071\026\117\027\057\032\066\033\043\037\106" +
    "\041\044\053\107\055\050\065\073\066\104\067\052\070" +
    "\131\001\002\000\010\027\057\032\066\070\251\001\002" +
    "\000\046\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\040\uff98\042\uff98\043\uff98\045\uff98\046\uff98\047\uff98" +
    "\050\uff98\051\uff98\052\uff98\056\uff98\060\uff98\061\uff98\001" +
    "\002\000\074\004\uffcf\005\uffcf\006\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\032\uffcf\033\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\044\uffcf\053\uffcf\055\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\001\002\000\004" +
    "\044\264\001\002\000\074\004\uffc7\005\uffc7\006\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032" +
    "\uffc7\033\uffc7\037\uffc7\040\uffc7\041\uffc7\044\uffc7\053\uffc7" +
    "\055\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\001" +
    "\002\000\004\037\252\001\002\000\054\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\036\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\052\ufff1\054\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\001" +
    "\002\000\046\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c" +
    "\036\uff9c\040\uff9c\042\uff9c\043\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\056\uff9c\060\uff9c\061\uff9c" +
    "\001\002\000\046\031\uff96\032\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\040\uff96\042\uff96\043\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\056\uff96\060\uff96\061" +
    "\uff96\001\002\000\046\031\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\040\uff9e\042\uff9e\043\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\056\uff9e\060\uff9e" +
    "\061\uff9e\001\002\000\046\031\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\040\uffa0\042\uffa0\043\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\056\uffa0\060" +
    "\uffa0\061\uffa0\001\002\000\046\031\uffa2\032\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\036\uffa2\040\uffa2\042\uffa2\043\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\056\uffa2" +
    "\060\uffa2\061\uffa2\001\002\000\046\031\uffa4\032\160\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\040\uffa4\042\uffa4\043\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\056" +
    "\uffa4\060\uffa4\061\uffa4\001\002\000\010\027\057\032\066" +
    "\070\251\001\002\000\036\023\072\025\071\026\117\027" +
    "\057\032\066\033\043\037\106\041\044\053\107\055\050" +
    "\065\073\066\104\067\052\070\131\001\002\000\044\031" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\040\uffa6\042\uffa6" +
    "\043\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\056\156\060\uffa6\061\uffa6\001\002\000\046\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\040\uff9b\042" +
    "\uff9b\043\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\056\uff9b\060\uff9b\061\uff9b\001\002\000\014\004" +
    "\006\005\007\006\023\064\022\070\012\001\002\000\046" +
    "\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\040" +
    "\uff92\042\uff92\043\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\051\uff92\052\uff92\056\uff92\060\uff92\061\uff92\001\002\000" +
    "\004\060\237\001\002\000\074\004\uffc9\005\uffc9\006\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\032\uffc9\033\uffc9\037\uffc9\040\uffc9\041\uffc9\044\uffc9\053" +
    "\uffc9\055\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\001\002\000\054\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\054\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\001\002\000\074\004\uffd0" +
    "\005\uffd0\006\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\032\uffd0\033\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\044\uffd0\053\uffd0\055\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\070\uffd0\001\002\000\054\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\054\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\001\002" +
    "\000\004\037\216\001\002\000\054\031\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\054\ufff8\056\ufff8\057\213\060\ufff8\061\ufff8\001\002" +
    "\000\042\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036" +
    "\uff94\041\162\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94" +
    "\052\uff94\054\210\056\uff94\060\uff94\001\002\000\046\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\040\uff99" +
    "\042\uff99\043\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\056\uff99\060\uff99\061\uff99\001\002\000\074" +
    "\004\uffd1\005\uffd1\006\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\044\uffd1\053\uffd1\055\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\067\uffd1\070\uffd1\001\002\000\036\023\072\025" +
    "\071\026\117\027\057\032\066\033\043\037\106\041\044" +
    "\053\107\055\050\065\073\066\104\067\052\070\131\001" +
    "\002\000\034\023\072\025\071\026\117\027\057\032\066" +
    "\033\043\037\106\041\044\053\107\065\073\066\104\067" +
    "\052\070\131\001\002\000\050\031\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\167\041\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\054\ufff2\056\ufff2" +
    "\057\ufff2\060\ufff2\070\uffeb\001\002\000\004\037\177\001" +
    "\002\000\046\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95" +
    "\036\uff95\040\uff95\042\uff95\043\uff95\045\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\056\uff95\060\uff95\061\uff95" +
    "\001\002\000\074\004\uffce\005\uffce\006\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\032\uffce\033" +
    "\uffce\037\uffce\040\uffce\041\uffce\044\uffce\053\uffce\055\uffce" +
    "\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\001\002\000" +
    "\042\031\uffa8\033\uffa8\034\154\035\uffa8\036\uffa8\040\uffa8" +
    "\042\uffa8\043\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\060\uffa8\061\uffa8\001\002\000\040\031\uffaa" +
    "\033\152\035\uffaa\036\uffaa\040\uffaa\042\uffaa\043\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\060\uffaa" +
    "\061\uffaa\001\002\000\036\031\150\035\uffac\036\uffac\040" +
    "\uffac\042\uffac\043\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\060\uffac\061\uffac\001\002\000\046\031" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\040\uff9a" +
    "\042\uff9a\043\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\056\uff9a\060\uff9a\061\uff9a\001\002\000\034" +
    "\035\uffae\036\uffae\040\uffae\042\uffae\043\uffae\045\uffae\046" +
    "\146\047\uffae\050\uffae\051\uffae\052\uffae\060\uffae\061\uffae" +
    "\001\002\000\032\035\uffb0\036\uffb0\040\uffb0\042\uffb0\043" +
    "\uffb0\045\144\047\uffb0\050\uffb0\051\uffb0\052\uffb0\060\uffb0" +
    "\061\uffb0\001\002\000\006\036\164\060\176\001\002\000" +
    "\030\035\uffb2\036\uffb2\040\uffb2\042\uffb2\043\uffb2\047\uffb2" +
    "\050\142\051\uffb2\052\uffb2\060\uffb2\061\uffb2\001\002\000" +
    "\026\035\uffb4\036\uffb4\040\uffb4\042\uffb4\043\uffb4\047\140" +
    "\051\uffb4\052\uffb4\060\uffb4\061\uffb4\001\002\000\024\035" +
    "\uffb6\036\uffb6\040\uffb6\042\uffb6\043\uffb6\051\uffb6\052\136" +
    "\060\uffb6\061\uffb6\001\002\000\022\035\uffb8\036\uffb8\040" +
    "\uffb8\042\uffb8\043\uffb8\051\134\060\uffb8\061\uffb8\001\002" +
    "\000\020\035\130\036\uffba\040\uffba\042\uffba\043\uffba\060" +
    "\uffba\061\uffba\001\002\000\036\023\072\025\071\026\117" +
    "\027\057\032\066\033\043\037\106\041\044\053\107\055" +
    "\050\065\073\066\104\067\052\070\131\001\002\000\054" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\167\040\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\001\002\000\050\031\uff94\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\040\uff94\041\162\042\uff94\043" +
    "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\056\uff94\060\uff94\061\uff94\001\002\000\022\035\uffb9\036" +
    "\uffb9\040\uffb9\042\uffb9\043\uffb9\051\134\060\uffb9\061\uffb9" +
    "\001\002\000\036\023\072\025\071\026\117\027\057\032" +
    "\066\033\043\037\106\041\044\053\107\055\050\065\073" +
    "\066\104\067\052\070\131\001\002\000\024\035\uffb7\036" +
    "\uffb7\040\uffb7\042\uffb7\043\uffb7\051\uffb7\052\136\060\uffb7" +
    "\061\uffb7\001\002\000\036\023\072\025\071\026\117\027" +
    "\057\032\066\033\043\037\106\041\044\053\107\055\050" +
    "\065\073\066\104\067\052\070\131\001\002\000\026\035" +
    "\uffb5\036\uffb5\040\uffb5\042\uffb5\043\uffb5\047\140\051\uffb5" +
    "\052\uffb5\060\uffb5\061\uffb5\001\002\000\036\023\072\025" +
    "\071\026\117\027\057\032\066\033\043\037\106\041\044" +
    "\053\107\055\050\065\073\066\104\067\052\070\131\001" +
    "\002\000\030\035\uffb3\036\uffb3\040\uffb3\042\uffb3\043\uffb3" +
    "\047\uffb3\050\142\051\uffb3\052\uffb3\060\uffb3\061\uffb3\001" +
    "\002\000\036\023\072\025\071\026\117\027\057\032\066" +
    "\033\043\037\106\041\044\053\107\055\050\065\073\066" +
    "\104\067\052\070\131\001\002\000\032\035\uffb1\036\uffb1" +
    "\040\uffb1\042\uffb1\043\uffb1\045\144\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\060\uffb1\061\uffb1\001\002\000\036\023\072" +
    "\025\071\026\117\027\057\032\066\033\043\037\106\041" +
    "\044\053\107\055\050\065\073\066\104\067\052\070\131" +
    "\001\002\000\034\035\uffaf\036\uffaf\040\uffaf\042\uffaf\043" +
    "\uffaf\045\uffaf\046\146\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\060\uffaf\061\uffaf\001\002\000\036\023\072\025\071\026" +
    "\117\027\057\032\066\033\043\037\106\041\044\053\107" +
    "\055\050\065\073\066\104\067\052\070\131\001\002\000" +
    "\036\031\150\035\uffad\036\uffad\040\uffad\042\uffad\043\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\060" +
    "\uffad\061\uffad\001\002\000\036\023\072\025\071\026\117" +
    "\027\057\032\066\033\043\037\106\041\044\053\107\055" +
    "\050\065\073\066\104\067\052\070\131\001\002\000\040" +
    "\031\uffab\033\152\035\uffab\036\uffab\040\uffab\042\uffab\043" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\060\uffab\061\uffab\001\002\000\036\023\072\025\071\026" +
    "\117\027\057\032\066\033\043\037\106\041\044\053\107" +
    "\055\050\065\073\066\104\067\052\070\131\001\002\000" +
    "\042\031\uffa9\033\uffa9\034\154\035\uffa9\036\uffa9\040\uffa9" +
    "\042\uffa9\043\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\060\uffa9\061\uffa9\001\002\000\036\023\072" +
    "\025\071\026\117\027\057\032\066\033\043\037\106\041" +
    "\044\053\107\055\050\065\073\066\104\067\052\070\131" +
    "\001\002\000\044\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\040\uffa7\042\uffa7\043\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\056\156\060\uffa7\061\uffa7\001" +
    "\002\000\036\023\072\025\071\026\117\027\057\032\066" +
    "\033\043\037\106\041\044\053\107\055\050\065\073\066" +
    "\104\067\052\070\131\001\002\000\046\031\uffa5\032\160" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\040\uffa5\042\uffa5\043" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\056\uffa5\060\uffa5\061\uffa5\001\002\000\036\023\072\025" +
    "\071\026\117\027\057\032\066\033\043\037\106\041\044" +
    "\053\107\055\050\065\073\066\104\067\052\070\131\001" +
    "\002\000\046\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\040\uffa3\042\uffa3\043\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\056\uffa3\060\uffa3\061\uffa3" +
    "\001\002\000\036\023\072\025\071\026\117\027\057\032" +
    "\066\033\043\037\106\041\044\053\107\055\050\065\073" +
    "\066\104\067\052\070\131\001\002\000\006\036\164\042" +
    "\165\001\002\000\036\023\072\025\071\026\117\027\057" +
    "\032\066\033\043\037\106\041\044\053\107\055\050\065" +
    "\073\066\104\067\052\070\131\001\002\000\052\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\054\ufff9\056\ufff9\060\ufff9\061\ufff9\001" +
    "\002\000\020\035\130\036\uffbb\040\uffbb\042\uffbb\043\uffbb" +
    "\060\uffbb\061\uffbb\001\002\000\040\023\072\025\071\026" +
    "\117\027\057\032\066\033\043\037\106\040\uff8d\041\044" +
    "\053\107\055\050\065\073\066\104\067\052\070\131\001" +
    "\002\000\004\040\175\001\002\000\012\036\164\040\uff90" +
    "\042\uff90\061\173\001\002\000\006\040\uff8e\042\uff8e\001" +
    "\002\000\036\023\072\025\071\026\117\027\057\032\066" +
    "\033\043\037\106\041\044\053\107\055\050\065\073\066" +
    "\104\067\052\070\131\001\002\000\006\040\uff8f\042\uff8f" +
    "\001\002\000\054\031\uff91\032\uff91\033\uff91\034\uff91\035" +
    "\uff91\036\uff91\040\uff91\041\uff91\042\uff91\043\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\054\uff91\056" +
    "\uff91\057\uff91\060\uff91\061\uff91\001\002\000\074\004\uffc8" +
    "\005\uffc8\006\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\032\uffc8\033\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\044\uffc8\053\uffc8\055\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\070\uffc8\001\002\000\036\023\072\025\071\026" +
    "\117\027\057\032\066\033\043\037\106\041\044\053\107" +
    "\055\050\065\073\066\104\067\052\070\131\001\002\000" +
    "\006\036\164\040\201\001\002\000\004\043\202\001\002" +
    "\000\072\004\006\005\007\006\023\011\047\012\111\013" +
    "\056\014\101\015\074\016\045\017\021\023\072\024\067" +
    "\025\071\026\117\027\057\030\051\032\066\033\043\037" +
    "\106\041\044\044\uffe2\053\107\055\050\064\022\065\073" +
    "\066\104\067\052\070\110\001\002\000\004\044\204\001" +
    "\002\000\074\004\uffc4\005\uffc4\006\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\032\uffc4\033\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\044\uffc4\053\uffc4\055\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\001\002\000\046" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\040" +
    "\uff9f\042\uff9f\043\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\056\uff9f\060\uff9f\061\uff9f\001\002\000" +
    "\006\036\164\040\207\001\002\000\046\031\uff97\032\uff97" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\040\uff97\042\uff97\043" +
    "\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97" +
    "\056\uff97\060\uff97\061\uff97\001\002\000\036\023\072\025" +
    "\071\026\117\027\057\032\066\033\043\037\106\041\044" +
    "\053\107\055\050\065\073\066\104\067\052\070\131\001" +
    "\002\000\006\036\164\060\212\001\002\000\074\004\uffe5" +
    "\005\uffe5\006\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\032\uffe5\033\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\044\uffe5\053\uffe5\055\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\001\002\000\004\070\214\001\002\000" +
    "\056\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\037\167\040\ufff7\041\ufff7\042\ufff7\043\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\054\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\001\002\000\054\031\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\054\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\001\002\000\036\023\072\025\071\026\117\027\057\032" +
    "\066\033\043\037\106\041\044\053\107\055\050\065\073" +
    "\066\104\067\052\070\131\001\002\000\006\036\164\040" +
    "\220\001\002\000\004\043\221\001\002\000\010\021\222" +
    "\022\225\044\uffbe\001\002\000\004\043\234\001\002\000" +
    "\010\021\222\022\225\044\uffbe\001\002\000\004\044\232" +
    "\001\002\000\036\023\072\025\071\026\117\027\057\032" +
    "\066\033\043\037\106\041\044\053\107\055\050\065\073" +
    "\066\104\067\052\070\131\001\002\000\006\036\164\043" +
    "\227\001\002\000\072\004\006\005\007\006\023\011\047" +
    "\012\111\013\056\014\101\015\074\016\045\017\021\023" +
    "\072\024\067\025\071\026\117\027\057\030\051\032\066" +
    "\033\043\037\106\041\044\044\uffe2\053\107\055\050\064" +
    "\022\065\073\066\104\067\052\070\110\001\002\000\004" +
    "\044\231\001\002\000\010\021\uffbd\022\uffbd\044\uffbd\001" +
    "\002\000\074\004\uffc0\005\uffc0\006\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\032\uffc0\033\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\044\uffc0\053\uffc0\055\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\001\002\000\004" +
    "\044\uffbf\001\002\000\072\004\006\005\007\006\023\011" +
    "\047\012\111\013\056\014\101\015\074\016\045\017\021" +
    "\023\072\024\067\025\071\026\117\027\057\030\051\032" +
    "\066\033\043\037\106\041\044\044\uffe2\053\107\055\050" +
    "\064\022\065\073\066\104\067\052\070\110\001\002\000" +
    "\004\044\236\001\002\000\010\021\uffbc\022\uffbc\044\uffbc" +
    "\001\002\000\074\004\uffcb\005\uffcb\006\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\032\uffcb\033" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\044\uffcb\053\uffcb\055\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\001\002\000" +
    "\050\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\040\uffe6\041\241\042\uffe6\043\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\056\uffe6\060\uffe6\061\uffe6" +
    "\001\002\000\036\023\072\025\071\026\117\027\057\032" +
    "\066\033\043\037\106\041\044\053\107\055\050\065\073" +
    "\066\104\067\052\070\131\001\002\000\046\031\uff93\032" +
    "\uff93\033\uff93\034\uff93\035\uff93\036\uff93\040\uff93\042\uff93" +
    "\043\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052" +
    "\uff93\056\uff93\060\uff93\061\uff93\001\002\000\006\036\164" +
    "\042\244\001\002\000\052\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\040\uffe6\041\241\042\uffe6\043\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\054" +
    "\uffe6\056\uffe6\060\uffe6\061\uffe6\001\002\000\050\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\040\uffe7\042" +
    "\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\054\uffe7\056\uffe7\060\uffe7\061\uffe7\001\002\000" +
    "\006\036\164\060\247\001\002\000\074\004\uffc2\005\uffc2" +
    "\006\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\032\uffc2\033\uffc2\037\uffc2\040\uffc2\041\uffc2\044" +
    "\uffc2\053\uffc2\055\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\070\uffc2\001\002\000\054\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\054" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\001\002\000\054" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\054\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\001\002\000\036\023\072\025\071\026\117" +
    "\027\057\032\066\033\043\037\106\041\044\053\107\055" +
    "\050\065\073\066\104\067\052\070\131\001\002\000\006" +
    "\036\164\040\254\001\002\000\004\043\255\001\002\000" +
    "\072\004\006\005\007\006\023\011\047\012\111\013\056" +
    "\014\101\015\074\016\045\017\021\023\072\024\067\025" +
    "\071\026\117\027\057\030\051\032\066\033\043\037\106" +
    "\041\044\044\uffe2\053\107\055\050\064\022\065\073\066" +
    "\104\067\052\070\110\001\002\000\004\044\257\001\002" +
    "\000\076\004\uffc6\005\uffc6\006\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\032\uffc6\033\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\044\uffc6\053\uffc6\055\uffc6\063\260" +
    "\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\001\002\000" +
    "\004\043\261\001\002\000\072\004\006\005\007\006\023" +
    "\011\047\012\111\013\056\014\101\015\074\016\045\017" +
    "\021\023\072\024\067\025\071\026\117\027\057\030\051" +
    "\032\066\033\043\037\106\041\044\044\uffe2\053\107\055" +
    "\050\064\022\065\073\066\104\067\052\070\110\001\002" +
    "\000\004\044\263\001\002\000\074\004\uffc5\005\uffc5\006" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\032\uffc5\033\uffc5\037\uffc5\040\uffc5\041\uffc5\044\uffc5" +
    "\053\uffc5\055\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\001\002\000\032\002\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\017\uffd8\020\uffd8\044\uffd8\062\uffd8\064" +
    "\uffd8\070\uffd8\001\002\000\006\041\162\060\266\001\002" +
    "\000\074\004\uffc1\005\uffc1\006\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\032\uffc1\033\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\044\uffc1\053\uffc1\055\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\067\uffc1\070\uffc1\001\002\000\046\031" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\040\uffa1" +
    "\042\uffa1\043\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\056\uffa1\060\uffa1\061\uffa1\001\002\000\016" +
    "\004\006\005\007\006\023\017\021\064\022\070\012\001" +
    "\002\000\036\023\072\025\071\026\117\027\057\032\066" +
    "\033\043\037\106\041\044\053\107\055\050\065\073\066" +
    "\104\067\052\070\131\001\002\000\006\036\164\060\273" +
    "\001\002\000\070\004\006\005\007\006\023\011\047\012" +
    "\111\013\056\014\101\015\074\016\045\017\021\023\072" +
    "\024\067\025\071\026\117\027\057\030\051\032\066\033" +
    "\043\037\106\041\044\053\107\055\050\064\022\065\073" +
    "\066\104\067\052\070\110\001\002\000\004\040\275\001" +
    "\002\000\004\043\276\001\002\000\072\004\006\005\007" +
    "\006\023\011\047\012\111\013\056\014\101\015\074\016" +
    "\045\017\021\023\072\024\067\025\071\026\117\027\057" +
    "\030\051\032\066\033\043\037\106\041\044\044\uffe2\053" +
    "\107\055\050\064\022\065\073\066\104\067\052\070\110" +
    "\001\002\000\004\044\300\001\002\000\074\004\uffc3\005" +
    "\uffc3\006\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\032\uffc3\033\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\044\uffc3\053\uffc3\055\uffc3\064\uffc3\065\uffc3\066\uffc3\067" +
    "\uffc3\070\uffc3\001\002\000\004\044\uffe3\001\002\000\074" +
    "\004\uffca\005\uffca\006\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\032\uffca\033\uffca\037\uffca\040" +
    "\uffca\041\uffca\044\uffca\053\uffca\055\uffca\064\uffca\065\uffca" +
    "\066\uffca\067\uffca\070\uffca\001\002\000\004\042\304\001" +
    "\002\000\046\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c" +
    "\036\uff8c\040\uff8c\042\uff8c\043\uff8c\045\uff8c\046\uff8c\047" +
    "\uff8c\050\uff8c\051\uff8c\052\uff8c\056\uff8c\060\uff8c\061\uff8c" +
    "\001\002\000\046\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\040\uff9d\042\uff9d\043\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\056\uff9d\060\uff9d\061" +
    "\uff9d\001\002\000\010\041\241\054\uffe6\060\uffe6\001\002" +
    "\000\006\054\311\060\310\001\002\000\106\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032\uffe9" +
    "\033\uffe9\037\uffe9\040\uffe9\041\uffe9\044\uffe9\053\uffe9\055" +
    "\uffe9\062\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9" +
    "\001\002\000\036\023\072\025\071\026\117\027\057\032" +
    "\066\033\043\037\106\041\044\053\107\055\050\065\073" +
    "\066\104\067\052\070\131\001\002\000\006\036\164\060" +
    "\313\001\002\000\106\002\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\032\uffea\033\uffea\037\uffea\040" +
    "\uffea\041\uffea\044\uffea\053\uffea\055\uffea\062\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\070\uffea\001\002\000\004\070" +
    "\320\001\002\000\006\040\uffdd\061\316\001\002\000\014" +
    "\004\006\005\007\006\023\064\022\070\012\001\002\000" +
    "\004\040\uffde\001\002\000\006\040\uffdc\061\321\001\002" +
    "\000\014\004\006\005\007\006\023\064\022\070\012\001" +
    "\002\000\004\040\uffdb\001\002\000\054\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\055\ufff0\056\ufff0\060\ufff0\061\ufff0\070\ufff0\001" +
    "\002\000\004\070\325\001\002\000\006\041\241\054\uffe6" +
    "\001\002\000\004\054\327\001\002\000\036\023\072\025" +
    "\071\026\117\027\057\032\066\033\043\037\106\041\044" +
    "\053\107\055\050\065\073\066\104\067\052\070\131\001" +
    "\002\000\006\036\164\060\331\001\002\000\106\002\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\032" +
    "\uffe8\033\uffe8\037\uffe8\040\uffe8\041\uffe8\044\uffe8\053\uffe8" +
    "\055\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070" +
    "\uffe8\001\002\000\004\070\333\001\002\000\004\060\334" +
    "\001\002\000\030\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\017\uffd2\020\uffd2\062\uffd2\064\uffd2\070\uffd2" +
    "\001\002\000\004\002\ufffb\001\002\000\012\037\337\041" +
    "\241\054\uffe6\060\uffe6\001\002\000\016\004\006\005\007" +
    "\006\023\040\uffd9\064\022\070\012\001\002\000\004\040" +
    "\341\001\002\000\004\043\342\001\002\000\072\004\006" +
    "\005\007\006\023\011\047\012\111\013\056\014\101\015" +
    "\074\016\045\017\021\023\072\024\067\025\071\026\117" +
    "\027\057\030\051\032\066\033\043\037\106\041\044\044" +
    "\uffe2\053\107\055\050\064\022\065\073\066\104\067\052" +
    "\070\110\001\002\000\004\044\344\001\002\000\032\002" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\017\uffdf" +
    "\020\uffdf\044\uffdf\062\uffdf\064\uffdf\070\uffdf\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002\000\020\004" +
    "\006\005\007\006\023\017\021\044\uffe0\064\022\070\012" +
    "\001\002\000\020\004\006\005\007\006\023\017\021\044" +
    "\uffe0\064\022\070\012\001\002\000\004\044\354\001\002" +
    "\000\004\070\355\001\002\000\004\060\356\001\002\000" +
    "\030\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\017\uffe4\020\uffe4\062\uffe4\064\uffe4\070\uffe4\001\002\000" +
    "\004\044\uffe1\001\002\000\022\004\006\005\007\006\023" +
    "\017\021\020\024\044\uffd4\064\022\070\012\001\002\000" +
    "\004\044\370\001\002\000\022\004\006\005\007\006\023" +
    "\017\021\020\024\044\uffd4\064\022\070\012\001\002\000" +
    "\022\004\006\005\007\006\023\017\021\020\024\044\uffd4" +
    "\064\022\070\012\001\002\000\022\004\006\005\007\006" +
    "\023\017\021\020\024\044\uffd4\064\022\070\012\001\002" +
    "\000\004\044\uffd6\001\002\000\004\044\uffd5\001\002\000" +
    "\004\044\uffd7\001\002\000\004\070\371\001\002\000\004" +
    "\060\372\001\002\000\030\002\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\017\uffd3\020\uffd3\062\uffd3\064\uffd3" +
    "\070\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\024\002\010\007\014\010\016\011\007\014" +
    "\024\015\013\016\015\021\025\024\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\347\007\014\010\016\011\007\014\024" +
    "\015\013\016\015\021\025\024\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\345\007\014\010\016" +
    "\011\007\014\024\015\013\016\015\021\025\024\012\001" +
    "\001\000\024\002\344\007\014\010\016\011\007\014\024" +
    "\015\013\016\015\021\025\024\012\001\001\000\002\001" +
    "\001\000\024\002\334\007\014\010\016\011\007\014\024" +
    "\015\013\016\015\021\025\024\012\001\001\000\002\001" +
    "\001\000\006\007\331\010\016\001\001\000\006\007\323" +
    "\010\016\001\001\000\004\010\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\027\007\014\010\016" +
    "\011\007\014\024\015\013\016\015\021\025\024\012\001" +
    "\001\000\024\002\026\007\014\010\016\011\007\014\024" +
    "\015\013\016\015\021\025\024\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\032" +
    "\010\016\022\034\023\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\110" +
    "\003\102\004\101\005\077\006\075\007\037\010\016\011" +
    "\104\013\076\017\053\026\054\027\052\030\112\031\041" +
    "\032\074\033\040\034\045\037\121\040\126\041\125\042" +
    "\124\043\123\044\122\045\120\046\117\047\115\050\114" +
    "\051\113\052\067\053\064\054\063\055\062\056\061\057" +
    "\057\060\060\061\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\131\004\101\005" +
    "\077\006\075\056\304\057\057\060\060\061\111\001\001" +
    "\000\064\003\131\004\101\005\077\006\075\037\170\040" +
    "\126\041\125\042\124\043\123\044\122\045\120\046\117" +
    "\047\115\050\114\051\113\052\067\053\064\054\063\055" +
    "\062\056\061\057\057\060\060\061\111\062\302\063\171" +
    "\001\001\000\002\001\001\000\110\003\102\004\101\005" +
    "\077\006\075\007\037\010\016\011\104\013\076\017\300" +
    "\026\054\027\052\030\112\031\041\032\074\033\040\034" +
    "\045\037\121\040\126\041\125\042\124\043\123\044\122" +
    "\045\120\046\117\047\115\050\114\051\113\052\067\053" +
    "\064\054\063\055\062\056\061\057\057\060\060\061\111" +
    "\001\001\000\002\001\001\000\026\003\131\004\101\005" +
    "\077\006\075\054\266\055\062\056\061\057\057\060\060" +
    "\061\111\001\001\000\012\003\264\004\101\005\077\006" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\247\006\075\001\001\000\060\003\131\004\101" +
    "\005\077\006\075\037\245\040\126\041\125\042\124\043" +
    "\123\044\122\045\120\046\117\047\115\050\114\051\113" +
    "\052\067\053\064\054\063\055\062\056\061\057\057\060" +
    "\060\061\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\237\010\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\003\131\004\101\005\077\006\075\037\205\040" +
    "\126\041\125\042\124\043\123\044\122\045\120\046\117" +
    "\047\115\050\114\051\113\052\067\053\064\054\063\055" +
    "\062\056\061\057\057\060\060\061\111\001\001\000\024" +
    "\003\131\004\101\005\077\006\075\055\204\056\061\057" +
    "\057\060\060\061\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\131\004\101\005" +
    "\077\006\075\041\132\042\124\043\123\044\122\045\120" +
    "\046\117\047\115\050\114\051\113\052\067\053\064\054" +
    "\063\055\062\056\061\057\057\060\060\061\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\131\004\101\005\077\006\075\042\134\043\123" +
    "\044\122\045\120\046\117\047\115\050\114\051\113\052" +
    "\067\053\064\054\063\055\062\056\061\057\057\060\060" +
    "\061\111\001\001\000\002\001\001\000\050\003\131\004" +
    "\101\005\077\006\075\043\136\044\122\045\120\046\117" +
    "\047\115\050\114\051\113\052\067\053\064\054\063\055" +
    "\062\056\061\057\057\060\060\061\111\001\001\000\002" +
    "\001\001\000\046\003\131\004\101\005\077\006\075\044" +
    "\140\045\120\046\117\047\115\050\114\051\113\052\067" +
    "\053\064\054\063\055\062\056\061\057\057\060\060\061" +
    "\111\001\001\000\002\001\001\000\044\003\131\004\101" +
    "\005\077\006\075\045\142\046\117\047\115\050\114\051" +
    "\113\052\067\053\064\054\063\055\062\056\061\057\057" +
    "\060\060\061\111\001\001\000\002\001\001\000\042\003" +
    "\131\004\101\005\077\006\075\046\144\047\115\050\114" +
    "\051\113\052\067\053\064\054\063\055\062\056\061\057" +
    "\057\060\060\061\111\001\001\000\002\001\001\000\040" +
    "\003\131\004\101\005\077\006\075\047\146\050\114\051" +
    "\113\052\067\053\064\054\063\055\062\056\061\057\057" +
    "\060\060\061\111\001\001\000\002\001\001\000\036\003" +
    "\131\004\101\005\077\006\075\050\150\051\113\052\067" +
    "\053\064\054\063\055\062\056\061\057\057\060\060\061" +
    "\111\001\001\000\002\001\001\000\034\003\131\004\101" +
    "\005\077\006\075\051\152\052\067\053\064\054\063\055" +
    "\062\056\061\057\057\060\060\061\111\001\001\000\002" +
    "\001\001\000\032\003\131\004\101\005\077\006\075\052" +
    "\154\053\064\054\063\055\062\056\061\057\057\060\060" +
    "\061\111\001\001\000\002\001\001\000\030\003\131\004" +
    "\101\005\077\006\075\053\156\054\063\055\062\056\061" +
    "\057\057\060\060\061\111\001\001\000\002\001\001\000" +
    "\026\003\131\004\101\005\077\006\075\054\160\055\062" +
    "\056\061\057\057\060\060\061\111\001\001\000\002\001" +
    "\001\000\060\003\131\004\101\005\077\006\075\037\162" +
    "\040\126\041\125\042\124\043\123\044\122\045\120\046" +
    "\117\047\115\050\114\051\113\052\067\053\064\054\063" +
    "\055\062\056\061\057\057\060\060\061\111\001\001\000" +
    "\002\001\001\000\056\003\131\004\101\005\077\006\075" +
    "\040\165\041\125\042\124\043\123\044\122\045\120\046" +
    "\117\047\115\050\114\051\113\052\067\053\064\054\063" +
    "\055\062\056\061\057\057\060\060\061\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\131\004\101" +
    "\005\077\006\075\037\170\040\126\041\125\042\124\043" +
    "\123\044\122\045\120\046\117\047\115\050\114\051\113" +
    "\052\067\053\064\054\063\055\062\056\061\057\057\060" +
    "\060\061\111\062\167\063\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\131\004" +
    "\101\005\077\006\075\037\170\040\126\041\125\042\124" +
    "\043\123\044\122\045\120\046\117\047\115\050\114\051" +
    "\113\052\067\053\064\054\063\055\062\056\061\057\057" +
    "\060\060\061\111\063\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\131\004\101" +
    "\005\077\006\075\037\177\040\126\041\125\042\124\043" +
    "\123\044\122\045\120\046\117\047\115\050\114\051\113" +
    "\052\067\053\064\054\063\055\062\056\061\057\057\060" +
    "\060\061\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\110\003\102\004\101\005\077\006\075\007\037\010" +
    "\016\011\104\013\076\017\202\026\054\027\052\030\112" +
    "\031\041\032\074\033\040\034\045\037\121\040\126\041" +
    "\125\042\124\043\123\044\122\045\120\046\117\047\115" +
    "\050\114\051\113\052\067\053\064\054\063\055\062\056" +
    "\061\057\057\060\060\061\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\003\131\004\101\005\077\006\075" +
    "\037\210\040\126\041\125\042\124\043\123\044\122\045" +
    "\120\046\117\047\115\050\114\051\113\052\067\053\064" +
    "\054\063\055\062\056\061\057\057\060\060\061\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\131\004\101\005\077\006\075\037\216\040\126\041\125" +
    "\042\124\043\123\044\122\045\120\046\117\047\115\050" +
    "\114\051\113\052\067\053\064\054\063\055\062\056\061" +
    "\057\057\060\060\061\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\223\036\222\001\001\000\002" +
    "\001\001\000\006\035\232\036\222\001\001\000\002\001" +
    "\001\000\060\003\131\004\101\005\077\006\075\037\225" +
    "\040\126\041\125\042\124\043\123\044\122\045\120\046" +
    "\117\047\115\050\114\051\113\052\067\053\064\054\063" +
    "\055\062\056\061\057\057\060\060\061\111\001\001\000" +
    "\002\001\001\000\110\003\102\004\101\005\077\006\075" +
    "\007\037\010\016\011\104\013\076\017\227\026\054\027" +
    "\052\030\112\031\041\032\074\033\040\034\045\037\121" +
    "\040\126\041\125\042\124\043\123\044\122\045\120\046" +
    "\117\047\115\050\114\051\113\052\067\053\064\054\063" +
    "\055\062\056\061\057\057\060\060\061\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\003\102\004\101\005\077\006\075\007" +
    "\037\010\016\011\104\013\076\017\234\026\054\027\052" +
    "\030\112\031\041\032\074\033\040\034\045\037\121\040" +
    "\126\041\125\042\124\043\123\044\122\045\120\046\117" +
    "\047\115\050\114\051\113\052\067\053\064\054\063\055" +
    "\062\056\061\057\057\060\060\061\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\241\001\001\000\060\003\131\004\101\005\077\006\075" +
    "\037\242\040\126\041\125\042\124\043\123\044\122\045" +
    "\120\046\117\047\115\050\114\051\113\052\067\053\064" +
    "\054\063\055\062\056\061\057\057\060\060\061\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\131" +
    "\004\101\005\077\006\075\037\252\040\126\041\125\042" +
    "\124\043\123\044\122\045\120\046\117\047\115\050\114" +
    "\051\113\052\067\053\064\054\063\055\062\056\061\057" +
    "\057\060\060\061\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\003\102\004\101\005\077\006\075\007" +
    "\037\010\016\011\104\013\076\017\255\026\054\027\052" +
    "\030\112\031\041\032\074\033\040\034\045\037\121\040" +
    "\126\041\125\042\124\043\123\044\122\045\120\046\117" +
    "\047\115\050\114\051\113\052\067\053\064\054\063\055" +
    "\062\056\061\057\057\060\060\061\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\110\003" +
    "\102\004\101\005\077\006\075\007\037\010\016\011\104" +
    "\013\076\017\261\026\054\027\052\030\112\031\041\032" +
    "\074\033\040\034\045\037\121\040\126\041\125\042\124" +
    "\043\123\044\122\045\120\046\117\047\115\050\114\051" +
    "\113\052\067\053\064\054\063\055\062\056\061\057\057" +
    "\060\060\061\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\037\010\016\011\270\001" +
    "\001\000\060\003\131\004\101\005\077\006\075\037\271" +
    "\040\126\041\125\042\124\043\123\044\122\045\120\046" +
    "\117\047\115\050\114\051\113\052\067\053\064\054\063" +
    "\055\062\056\061\057\057\060\060\061\111\001\001\000" +
    "\002\001\001\000\106\003\102\004\101\005\077\006\075" +
    "\007\037\010\016\011\104\013\076\026\054\027\052\030" +
    "\112\031\041\032\074\033\040\034\273\037\121\040\126" +
    "\041\125\042\124\043\123\044\122\045\120\046\117\047" +
    "\115\050\114\051\113\052\067\053\064\054\063\055\062" +
    "\056\061\057\057\060\060\061\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\110\003\102\004\101\005\077" +
    "\006\075\007\037\010\016\011\104\013\076\017\276\026" +
    "\054\027\052\030\112\031\041\032\074\033\040\034\045" +
    "\037\121\040\126\041\125\042\124\043\123\044\122\045" +
    "\120\046\117\047\115\050\114\051\113\052\067\053\064" +
    "\054\063\055\062\056\061\057\057\060\060\061\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\131\004\101\005\077\006" +
    "\075\037\311\040\126\041\125\042\124\043\123\044\122" +
    "\045\120\046\117\047\115\050\114\051\113\052\067\053" +
    "\064\054\063\055\062\056\061\057\057\060\060\061\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\032\010\016\023\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\032\010\016\023\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\325\001\001\000" +
    "\002\001\001\000\060\003\131\004\101\005\077\006\075" +
    "\037\327\040\126\041\125\042\124\043\123\044\122\045" +
    "\120\046\117\047\115\050\114\051\113\052\067\053\064" +
    "\054\063\055\062\056\061\057\057\060\060\061\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\306\001\001\000\012\007\032\010\016\022\337" +
    "\023\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\110\003\102\004\101\005\077\006\075\007\037\010\016" +
    "\011\104\013\076\017\342\026\054\027\052\030\112\031" +
    "\041\032\074\033\040\034\045\037\121\040\126\041\125" +
    "\042\124\043\123\044\122\045\120\046\117\047\115\050" +
    "\114\051\113\052\067\053\064\054\063\055\062\056\061" +
    "\057\057\060\060\061\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\037\010\016\011" +
    "\351\020\352\001\001\000\012\007\037\010\016\011\351" +
    "\020\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\014\010\016\011\361\021\363\024\362\025\360\001" +
    "\001\000\002\001\001\000\016\007\014\010\016\011\361" +
    "\021\363\024\362\025\366\001\001\000\016\007\014\010" +
    "\016\011\361\021\363\024\362\025\365\001\001\000\016" +
    "\007\014\010\016\011\361\021\363\024\362\025\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= DECLARACION P 
            {
              Programa RESULT =null;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Programa(d, p); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= FUNCION P 
            {
              Programa RESULT =null;
		DefFuncion d = (DefFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Programa(d, p); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P ::= PROCEDIMIENTO P 
            {
              Programa RESULT =null;
		DefProcedimiento d = (DefProcedimiento)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Programa(d, p); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // P ::= CLASE P 
            {
              Programa RESULT =null;
		Externo d = (Externo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Programa(d, p); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // P ::= ESTRUCTURADO P 
            {
              Programa RESULT =null;
		Externo d = (Externo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Programa(d, p); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // P ::= DEFTIPO P 
            {
              Programa RESULT =null;
		Externo d = (Externo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Programa(d, p); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // P ::= 
            {
              Programa RESULT =null;
		 RESULT = new Programa(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DESIGNADOR ::= DESIGNADOR CAP EXPRESION CCIERRE 
            {
              Designador RESULT =null;
		Designador d = (Designador)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Corchetes(d, e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DESIGNADOR",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DESIGNADOR ::= I1 
            {
              Designador RESULT =null;
		Designador a = (Designador)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DESIGNADOR",1, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I1 ::= I1 PUNTO IDEN 
            {
              Designador RESULT =null;
		Designador d = (Designador)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Punto(d, new Identificador(id)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("I1",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I1 ::= I1 PUNTO LLAMADA 
            {
              Designador RESULT =null;
		Designador d = (Designador)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Llamada l = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Punto(d, l); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("I1",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I1 ::= I2 
            {
              Designador RESULT =null;
		Designador a = (Designador)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("I1",2, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // I2 ::= AST I2 
            {
              Designador RESULT =null;
		Designador d = (Designador)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Asterisco(d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("I2",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // I2 ::= I3 
            {
              Designador RESULT =null;
		Designador a = (Designador)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("I2",3, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // I3 ::= IDEN 
            {
              Designador RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Identificador(id); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("I3",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // I3 ::= THIS 
            {
              Designador RESULT =null;
		RESULT = new This(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("I3",4, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= POINTER T1 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Pointer(t); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= T1 
            {
              Tipo RESULT =null;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // T1 ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Int(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T1",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T1 ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Char(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T1",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T1 ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Bool(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T1",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T1 ::= IDEN 
            {
              Tipo RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Identificador(id); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T1",6, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= TIPO IDEN GENCORCHETES ASIG EXPRESION PUNTOCOMA 
            {
              Declaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		ArrayDimensiones c = (ArrayDimensiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Declaracion(false, t, new Identificador(i), c, e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= TIPO IDEN GENCORCHETES PUNTOCOMA 
            {
              Declaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		ArrayDimensiones c = (ArrayDimensiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Declaracion(t, new Identificador(i), c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= CONST TIPO IDEN GENCORCHETES ASIG EXPRESION PUNTOCOMA 
            {
              Declaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		ArrayDimensiones c = (ArrayDimensiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Declaracion(true, t, new Identificador(i), c, e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GENCORCHETES ::= CAP EXPRESION CCIERRE GENCORCHETES 
            {
              ArrayDimensiones RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		ArrayDimensiones g = (ArrayDimensiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new ArrayDimensiones(e, g); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("GENCORCHETES",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GENCORCHETES ::= 
            {
              ArrayDimensiones RESULT =null;
		 RESULT = new ArrayDimensiones(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("GENCORCHETES",8, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= DESIGNADOR ASIG EXPRESION PUNTOCOMA 
            {
              Asignacion RESULT =null;
		Designador d = (Designador)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Asignacion(d, e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ESTRUCTURADO ::= STRUCT LAP BLOQUE_DECLARACIONES LCIERRE IDEN PUNTOCOMA 
            {
              Externo RESULT =null;
		Declaraciones d = (Declaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new DefStruct(d,new Identificador(i)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURADO",10, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOQUE_INSTRUCCIONES ::= INSTRUCCION BLOQUE_INSTRUCCIONES 
            {
              BloqueInstrucciones RESULT =null;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		BloqueInstrucciones b = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new BloqueInstrucciones(i, b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOQUE_INSTRUCCIONES ::= 
            {
              BloqueInstrucciones RESULT =null;
		 RESULT = new BloqueInstrucciones(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",13, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOQUE_DECLARACIONES ::= DECLARACION BLOQUE_DECLARACIONES 
            {
              Declaraciones RESULT =null;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Declaraciones b = (Declaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Declaraciones(d, b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOQUE_DECLARACIONES ::= 
            {
              Declaraciones RESULT =null;
		 RESULT = new Declaraciones(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACIONES",14, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCION ::= TIPO IDEN PAP PARAMETROS PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE 
            {
              DefFuncion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Parametros p = (Parametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		BloqueInstrucciones b = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new DefFuncion(t, new Identificador(i), p, b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",15, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AUX1 ::= TIPO IDEN COMA AUX1 
            {
              Parametros RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Parametros p = (Parametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Parametros(new Parametro(t, false, new Identificador(i)), p); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AUX1",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AUX1 ::= TIPO IDEN 
            {
              Parametros RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Parametros(new Parametro(t, false, new Identificador(i)), new Parametros()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AUX1",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AUX1 ::= TIPO REF IDEN 
            {
              Parametros RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Parametros(new Parametro(t, true, new Identificador(i)), new Parametros()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AUX1",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AUX1 ::= TIPO REF IDEN COMA AUX1 
            {
              Parametros RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Parametros p = (Parametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Parametros(new Parametro(t, true, new Identificador(i)), p); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AUX1",17, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETROS ::= AUX1 
            {
              Parametros RESULT =null;
		Parametros a = (Parametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROS ::= 
            {
              Parametros RESULT =null;
		RESULT = new Parametros(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PROCEDIMIENTO ::= VOID IDEN PAP PARAMETROS PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE 
            {
              DefProcedimiento RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Parametros p = (Parametros)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		BloqueInstrucciones b = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new DefProcedimiento(new Identificador(i), p, b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",18, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPO_CLASE ::= DECLARACION CUERPO_CLASE 
            {
              CuerpoClase RESULT =null;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		CuerpoClase c = (CuerpoClase)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new CuerpoClase(d, c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CUERPO_CLASE ::= FUNCION CUERPO_CLASE 
            {
              CuerpoClase RESULT =null;
		DefFuncion d = (DefFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		CuerpoClase c = (CuerpoClase)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new CuerpoClase(d, c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUERPO_CLASE ::= PROCEDIMIENTO CUERPO_CLASE 
            {
              CuerpoClase RESULT =null;
		DefProcedimiento d = (DefProcedimiento)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		CuerpoClase c = (CuerpoClase)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new CuerpoClase(d, c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERPO_CLASE ::= 
            {
              CuerpoClase RESULT =null;
		 RESULT = new CuerpoClase(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",19, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CLASE ::= CLASS LAP CUERPO_CLASE LCIERRE IDEN PUNTOCOMA 
            {
              Externo RESULT =null;
		CuerpoClase c = (CuerpoClase)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new DefClase(c, new Identificador(i)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASE",11, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEFTIPO ::= TYPEDEF TIPO IDEN PUNTOCOMA 
            {
              Externo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new DefTipo(t, new Identificador(i)); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEFTIPO",12, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		Asignacion d = (Asignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRUCCION ::= MIENTRAS 
            {
              Instruccion RESULT =null;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCION ::= PARA 
            {
              Instruccion RESULT =null;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCCION ::= SELECTOR 
            {
              Instruccion RESULT =null;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCION ::= DEVOLVER 
            {
              Instruccion RESULT =null;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUCCION ::= BREAK PUNTOCOMA 
            {
              Instruccion RESULT =null;
		RESULT = new Break(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUCCION ::= CONTINUE PUNTOCOMA 
            {
              Instruccion RESULT =null;
		RESULT = new Continue(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCCION ::= BORRADO 
            {
              Instruccion RESULT =null;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCCION ::= EXPRESION PUNTOCOMA 
            {
              Instruccion RESULT =null;
		E d = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUCCION ::= CONDICIONAL 
            {
              Instruccion RESULT =null;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",26, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICIONAL ::= IF PAP EXPRESION PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE 
            {
              Instruccion RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		BloqueInstrucciones b = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new If(e, b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICIONAL ::= IF PAP EXPRESION PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE ELSE LAP BLOQUE_INSTRUCCIONES LCIERRE 
            {
              Instruccion RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		BloqueInstrucciones b1 = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		BloqueInstrucciones b2 = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new If(e, b1, b2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",20, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MIENTRAS ::= WHILE PAP EXPRESION PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE 
            {
              Instruccion RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		BloqueInstrucciones b = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new While(e, b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",21, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARA ::= FOR PAP DECLARACION EXPRESION PUNTOCOMA INSTRUCCION PCIERRE LAP BLOQUE_INSTRUCCIONES LCIERRE 
            {
              Instruccion RESULT =null;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		BloqueInstrucciones b = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new For(d, e, i, b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARA",22, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DEVOLVER ::= RETURN EXPRESION PUNTOCOMA 
            {
              Instruccion RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Return(e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEVOLVER",25, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BORRADO ::= DELETE DESIGNADOR PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Designador d = (Designador)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Delete(d); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BORRADO",24, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SELECTOR ::= SWITCH PAP EXPRESION PCIERRE LAP CUERPO_CASE LCIERRE 
            {
              Instruccion RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Cuerpo_Switch c = (Cuerpo_Switch)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Switch(e, c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SELECTOR",23, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPO_CASE ::= CASE_INDIVIDUAL CUERPO_CASE 
            {
              Cuerpo_Switch RESULT =null;
		SwitchCase i = (SwitchCase)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Cuerpo_Switch c = (Cuerpo_Switch)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Cuerpo_Switch(i, c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CASE",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPO_CASE ::= 
            {
              Cuerpo_Switch RESULT =null;
		 RESULT = new Cuerpo_Switch(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CASE",27, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASE_INDIVIDUAL ::= CASE EXPRESION LAP BLOQUE_INSTRUCCIONES LCIERRE 
            {
              SwitchCase RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		BloqueInstrucciones b = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Case(e, b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE_INDIVIDUAL",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASE_INDIVIDUAL ::= DEFAULT LAP BLOQUE_INSTRUCCIONES LCIERRE 
            {
              SwitchCase RESULT =null;
		BloqueInstrucciones b = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = new Default(b); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE_INDIVIDUAL",28, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION OR E0 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "||"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= E0 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E0 ::= E0 AND E1 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "&&"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",30, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E0 ::= E1 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",30, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E1 ::= E1 IGUAL E2 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "=="); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",31, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E1 ::= E2 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",31, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E2 ::= E2 DESIG E3 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "!="); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E2 ::= E3 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E3 ::= E3 MENORIG E4 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "<="); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E3 ::= E4 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E4 ::= E4 MENOR E5 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "<"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E4 ::= E5 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E5 ::= E5 MAYORIG E6 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, ">="); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E5 ::= E6 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E6 ::= E6 MAYOR E7 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, ">"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E6 ::= E7 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E7 ::= E7 SUMA E8 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "+"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E7 ::= E8 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E8 ::= E8 RESTA E9 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "-"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E8",38, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E8 ::= E9 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E8",38, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E9 ::= E9 DIV E10 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "/"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E9",39, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E9 ::= E10 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E9",39, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E10 ::= E10 MOD E11 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "%"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E10",40, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E10 ::= E11 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E10",40, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E11 ::= E11 AST E12 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new EBin(e1, e2, "*"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E11",41, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E11 ::= E12 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E11",41, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E12 ::= REF E12 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OpUn(e, "&"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E12",42, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E12 ::= E13 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E12",42, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E13 ::= NEG E13 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OpUn(e, "!"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E13",43, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E13 ::= E14 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E13",43, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E14 ::= RESTA E14 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new OpUn(e, "-"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E14",44, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E14 ::= E15 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E14",44, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E15 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = new True(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E15",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E15 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = new False(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E15",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E15 ::= ENT 
            {
              E RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Num((String) e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E15",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E15 ::= CARACTER 
            {
              E RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new Caracter((String) c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E15",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E15 ::= PAP EXPRESION PCIERRE 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E15",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E15 ::= LISTA 
            {
              E RESULT =null;
		E l = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = l; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E15",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E15 ::= LLAMADA 
            {
              E RESULT =null;
		Llamada l = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = l; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E15",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E15 ::= DESIGNADOR 
            {
              E RESULT =null;
		Designador d = (Designador)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E15",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E15 ::= NEW TIPO GENCORCHETES 
            {
              E RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		ArrayDimensiones c = (ArrayDimensiones)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new New(t, c); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E15",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E15 ::= NULL 
            {
              E RESULT =null;
		 RESULT = new Null(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E15",45, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LLAMADA ::= IDEN PAP SEQ_EXPRE PCIERRE 
            {
              Llamada RESULT =null;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		SeqExp e = (SeqExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = new Llamada(new Identificador(i), e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",47, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SEQ_EXPRE_NOVACIA ::= EXPRESION 
            {
              SeqExp RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new SeqExp(e, new SeqExp()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SEQ_EXPRE_NOVACIA",49, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SEQ_EXPRE_NOVACIA ::= EXPRESION COMA SEQ_EXPRE_NOVACIA 
            {
              SeqExp RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		SeqExp s = (SeqExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = new SeqExp(e, s); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SEQ_EXPRE_NOVACIA",49, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SEQ_EXPRE ::= SEQ_EXPRE_NOVACIA 
            {
              SeqExp RESULT =null;
		SeqExp s = (SeqExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = s;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SEQ_EXPRE",48, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SEQ_EXPRE ::= 
            {
              SeqExp RESULT =null;
		 RESULT = new SeqExp(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SEQ_EXPRE",48, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LISTA ::= CAP SEQ_EXPRE CCIERRE 
            {
              E RESULT =null;
		SeqExp s = (SeqExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = new Lista(s); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",46, RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

